import time

# python code to test speed of countEdgeMismatch. C++ version is around 150-200x faster.
def countEdgeMismatch(puzzle: list[list]) -> int:
    edge_mismatch = 0
    
    for i in range(64):
        if (i % 8 == 0):
            continue
        if (puzzle[i][3] != puzzle[i-1][1]):
            edge_mismatch += 1 
    
    for i in range(8, 64):
        if (puzzle[i][0] != puzzle[i-8][2]):
            edge_mismatch += 1
            
    return edge_mismatch

puzzle = [
    [2,3,1,0], [2,0,1,6], [6,5,2,1], [1,1,2,0], [4,4,2,0], [5,3,0,6], [2,6,3,5], [1,5,1,4],
    [0,1,6,4], [5,0,2,4], [0,5,2,0], [1,1,3,2], [2,5,0,0], [1,2,2,6], [1,1,4,4], [3,5,4,4],
    [1,0,1,2], [2,0,2,5], [4,5,0,1], [2,5,5,3], [6,2,3,1], [2,6,4,5], [1,0,0,4], [4,0,5,1],
    [3,6,2,2], [4,0,5,6], [6,3,0,3], [3,1,4,5], [5,1,2,2], [4,4,0,3], [4,1,2,5], [6,3,2,2],
    [1,1,5,2], [2,3,0,4], [1,2,5,6], [2,0,3,4], [1,6,0,5], [3,4,3,6], [1,2,4,2], [4,1,1,4],
    [4,6,1,4], [2,4,4,4], [6,3,1,1], [1,1,2,0], [1,0,2,2], [1,0,2,6], [3,5,0,3], [1,3,4,5],
    [2,3,6,4], [6,4,5,1], [4,2,3,6], [2,1,0,4], [4,5,1,4], [3,4,5,2], [2,3,4,0], [4,3,1,3],
    [6,1,1,1], [6,1,4,6], [1,4,1,2], [3,0,0,2], [2,6,5,1], [4,1,2,1], [4,1,2,0], [1,4,5,6]
]

start_time = time.time()
for i in range(10000):
    countEdgeMismatch(puzzle)
end_time = time.time()

print((end_time - start_time))